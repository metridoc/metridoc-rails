# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'rbconfig'

# Class to grab the users token locally or from hashicorp vault v2 endpoint using ldap
class Token
  def to_s
    begin
      Vault.address = "https://vault.library.upenn.edu"
      vault_instance = Vault.auth.token(ENV.fetch('VAULT_TOKEN', ''))
      token = ENV.fetch('VAULT_TOKEN')

    rescue
      begin
        puts "\nInvalid local Vault token, or local Vault token does not exist. Please enter Vault credentials."

        print "HashiCorp Vault username: "
        hv_user = STDIN.gets.chomp
        print "HashiCorp Vault password: "
        hv_pass = STDIN.noecho(&:gets).chomp
        
        Vault.address = "https://vault.library.upenn.edu"
        vault_instance = Vault.auth.ldap(hv_user, hv_pass)
        vault_instance.auth.client_token
      rescue
        puts "Invalid Vault credentials, try again."
        retry
      end
    end
  end
end

# Determine if arch is ARM
def arm_architecture?
  RbConfig::CONFIG['host_cpu'].downcase.start_with?('arm')
end

# Arrange nodes in reverse order so the manager is the last vm to be provisioned
cluster = {
  "metridoc-manager" => { :ip => "10.10.3.201", :cpus => 1, :mem => 4096, :port => 2020 }
}

Vagrant.configure("2") do |config|
  config.vagrant.plugins = ["vagrant-env", "vagrant-vbguest", "vagrant-hostsupdater"]

  # Select correct box for arch
  if arm_architecture?
    config.vm.box = "bento/ubuntu-22.04"
  else
    config.vm.box = "bento/ubuntu-22.04"
  end

  config.vbguest.auto_update = false

  # Install parallels plugin if user is on mac
  if Vagrant::Util::Platform::darwin?
    config.vagrant.plugins << "vagrant-parallels"
  end

  cluster.each_with_index do |(hostname, info), index|

    # Use the default insecure key as this is only used for development
    config.ssh.insert_key = false

    config.vm.define hostname do |cfg|
      cfg.vm.network :private_network, ip: "#{info[:ip]}"
      cfg.vm.network :forwarded_port, id: "ssh", host: info[:port], guest: 22
      cfg.vm.hostname = hostname

      # Virtual Box Settings
      cfg.vm.provider :virtualbox do |vb, override|
        vb.name = hostname
        vb.customize ["modifyvm", :id, "--memory", info[:mem], "--cpus", info[:cpus], "--hwvirtex", "on"]
        # push the first interface far out enough to minimize potential conflict with docker swarm
        # which defaults to 10.0.0.0/8 for networks/containers
        vb.customize ["modifyvm", :id, "--natnet1", "10.252/16"]
      end

      # Parallels Settings for Mac Environment
      # https://github.com/sprotheroe/vagrant-disksize/issues/45
      # To get parallels working you may need to run:
      #   vagrant plugin uninstall vagrant-disksize
      cfg.vm.provider :parallels do |prl, override|
        prl.name = hostname
        prl.memory = info[:mem]
        prl.cpus = info[:cpus]
      end

      # Update and install packages
      cfg.vm.provision "shell" do |s|
        s.inline = <<-SHELL
          sudo apt-get update && \
          sudo apt-get -y install python3-pip && \
          pip install jinja2==3.1.6
        SHELL
      end

      # Run the ansible playbook after the manager vm has been provisioned
      if hostname == "metridoc-manager"
        # only if you need to expose on your local network; usually not necessary
        # cfg.vm.provider :virtualbox do |vb, override|
        #   override.vm.network :forwarded_port, id: "http", host: 8080, guest: 80
        # end

        # Add volumes for development
        config.vm.synced_folder "../", "/metridoc"

        cfg.vm.provision :ansible_local do |ansible|
          ansible.config_file = "/metridoc/ansible/ansible.cfg"
          ansible.extra_vars = {
            ansible_hashi_vault_token: Token.new,
            ansible_hashi_vault_url: "https://vault.library.upenn.edu",
            ansible_user: "vagrant"
          }
          ansible.install_mode = "pip3"
          ansible.inventory_path = "/metridoc/ansible/inventories/vagrant"
          ansible.galaxy_role_file = "/metridoc/ansible/roles/requirements.dev.yml"
          ansible.galaxy_roles_path = "/metridoc/ansible/roles"
          ansible.galaxy_command = "ansible-galaxy install -r %{role_file} --force"
          ansible.limit = "all"
          ansible.tags = "all"
          ansible.playbook = "/metridoc/ansible/site.yml"
          ansible.verbose = true
        end
      end
    end

    # Add domains to hosts file
    config.hostsupdater.aliases = {
      "10.10.3.201" => [
        "metridoc-dev.library.upenn.edu"
      ]
    }
  end
end
