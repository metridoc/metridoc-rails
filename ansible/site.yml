---
- name: Install deps
  hosts: docker_swarm_manager
  become: true
  tasks:
  - ansible.builtin.pip:
      name:
        - jsondiff
        - passlib
        - pyyaml
        - requests<2.32.0
        - urllib3<2.0.0

- name: Provision Docker Swarm Cluster
  hosts: all
  become: true
  pre_tasks:
    - name: Install nfs client
      ansible.builtin.package:
        name: nfs-utils
        state: present
  tasks:
    - ansible.builtin.import_role:
        name: atosatto.docker-swarm

- name: Deploy application
  hosts: docker_swarm_manager
  become: true
  gather_facts: true
  tasks:
    - ansible.builtin.import_role:
        name: postgres_primary_manager
      tags: postgres_primary_manager
    - ansible.builtin.import_role:
        name: ezpaarse_manager
      tags: ezpaarse_manager
    - ansible.builtin.import_role:
        name: shibboleth_sp
        tasks_from: create_docker_network
      tags: shibboleth_sp
    - ansible.builtin.import_role:
        name: shibboleth_sp
      tags: shibboleth_sp
    - ansible.builtin.import_role:
        name: metridoc_manager
      tags: metridoc_manager
    - ansible.builtin.import_role:
        name: python_jobs_manager
      tags: python_jobs_manager
    - ansible.builtin.import_role:
        name: jenkins_manager
      tags: jenkins_manager
    - ansible.builtin.import_role:
        name: monitoring_manager
      tags: monitoring_manager
    - ansible.builtin.pause:
        minutes: 5
    - name: "Get metridoc container name"
      become: True
      shell:
        "docker ps -f name=metridoc_app.1 --format \"{{ '{{' }}.Names{{ '}}' }}\""
      register: container_name
    - name: "Print container name"
      debug:
        var: container_name.stdout_lines
    - name: "Print container name again"
      debug:
        var: container_name.stdout_lines[0]
    - name: "Get metridoc container info"
      docker_container_info:
        name: container_name.stdout_lines[0]
      register: metridoc_app_container
    - name: "print container info"
      debug: 
        var: metridoc_app_container
    - name: "run manually"
      become: True
      shell:
        "docker inspect {{ container_name.stdout_lines[0] }} --format=\"{{ '{{' }}.State.Health.Status{{  '}}' }}\""
      register: result
    - name: "debug result"
      debug:
        var: result
#    - name: "Wait for metridoc app to finish migrations"
#      docker_container_info:
#        name: metridoc_app
#      register: metridoc_app_container
#      until: metridoc_app_container.container.State.Health.Status == 'healthy'
#      retries: 15
#      delay: 25
    - ansible.builtin.import_role:
        name: postgres_replica_manager
      tags: postgres_replica_manager