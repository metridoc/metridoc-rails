version: 2.1

# Default slack config
default-slack-config: &default-slack-config
  channel: metridoc-notification
  failure_message: ":red_circle: Failure! ${CIRCLE_USERNAME}'s workflow (<${CIRCLE_BUILD_URL}|${CIRCLE_JOB}>) in <${GIT_URL}|${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}>, Message: ${GIT_COMMIT_DESC}"
  success_message: ":tada: Success! ${CIRCLE_USERNAME}'s workflow (<${CIRCLE_BUILD_URL}|${CIRCLE_JOB}>) in <${GIT_URL}|${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}>, Message: ${GIT_COMMIT_DESC}"
  webhook: ${SLACK_WEBHOOK}

orbs:
  slack: circleci/slack@3.4.2

# commands:
#   molecule_test:
#     description: Run the `molecule test` command within a role directory
#     parameters:
#       role:
#         description: Name of the Ansible role
#         type: string
#     steps:
#       - run:
#           command: pip3 install pytest pytest-testinfra
#       - run:
#           command: molecule test
#           working_directory: ansible/roles/<< parameters.role >>

jobs:
  check-for-secrets:
    docker:
      - image: zricethezav/gitleaks:v8.18.2
    shell: /bin/sh -leo pipefail
    working_directory: /root/project
    steps:
      - checkout
      - run:
          name: Check repository for secrets
          command: |
            gitleaks detect --source ${CIRCLE_WORKING_DIRECTORY}  --redact --log-opts "--full-history"
  deploy-production:
    docker:
      - image: quay.io/upennlibraries/ansible:2.9
    environment:
      GIT_URL: << pipeline.project.git_url >>/compare/<< pipeline.git.base_revision >>..<< pipeline.git.revision >>
      BASH_ENV: /etc/profile
    shell: /bin/sh -leo pipefail
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 1e:f7:a3:35:8f:1c:09:4e:33:8f:7c:00:60:ac:ca:7a
      - run:
          command: |
            echo "$SSH_BASTION_KNOWN_HOST" >> ~/.ssh/known_hosts
            echo "$DEPLOY_TARGET_KNOWN_HOST" >> ~/.ssh/known_hosts
            echo "$DEPLOY_TARGET_KNOWN_HOST_2" >> ~/.ssh/known_hosts
      - run:
          working_directory: ~/project/ansible
          command: |
            ansible-galaxy install -p roles -r roles/requirements.yml
      - run:
          working_directory: ~/project/ansible
          command: |
            ansible-playbook \
              -i inventories/production \
              -e "metridoc_image_tag=${CIRCLE_SHA1:0:7}" \
              -e "ansible_ssh_common_args='-qJ \"$SSH_BASTION_USER@$SSH_BASTION_HOST:$SSH_BASTION_PORT\"'" \
              -u deploy \
              -T 60 \
              --vault-id vault_password.py \
              production.yml
      - run:
          command: |
            apk add --update-cache --upgrade bash curl
            echo "export GIT_COMMIT_DESC='$(git --git-dir /root/project/.git log --oneline -n 1 $CIRCLE_SHA1)'" | tr '\n' ' ' >> $BASH_ENV
            source $BASH_ENV
      - slack/status: *default-slack-config
  deploy-staging:
    docker:
      - image: quay.io/upennlibraries/ansible:2.9
    environment:
      GIT_URL: << pipeline.project.git_url >>/compare/<< pipeline.git.base_revision >>..<< pipeline.git.revision >>
      BASH_ENV: /etc/profile
    shell: /bin/sh -leo pipefail
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 1e:f7:a3:35:8f:1c:09:4e:33:8f:7c:00:60:ac:ca:7a
      - run:
          command: |
            echo "$SSH_BASTION_KNOWN_HOST" >> ~/.ssh/known_hosts
            echo "$DEPLOY_TARGET_KNOWN_HOST_STAGING" >> ~/.ssh/known_hosts
      - run:
          working_directory: ~/project/ansible
          command: |
            ansible-galaxy install -p roles -r roles/requirements.yml
      - run:
          working_directory: ~/project/ansible
          command: |
            ansible-playbook \
              -i inventories/staging \
              -e "metridoc_image_tag=${CIRCLE_SHA1:0:7}" \
              -e "ansible_ssh_common_args='-qJ \"$SSH_BASTION_USER@$SSH_BASTION_HOST:$SSH_BASTION_PORT\"'" \
              -u deploy \
              -T 60 \
              --vault-id vault_password.py \
              site.yml
      - run:
          command: |
            apk add --update-cache --upgrade bash curl
            echo "export GIT_COMMIT_DESC='$(git --git-dir /root/project/.git log --oneline -n 1 $CIRCLE_SHA1)'" | tr '\n' ' ' >> $BASH_ENV
            source $BASH_ENV
      - slack/status: *default-slack-config
  publish_container:
    description: Builds and Tags a Docker Image.
    docker:
      - image: cimg/python:3.12
    parameters:
      image:
        description: Name of image to publish.
        type: string
      path:
        description: Path to the directory containing your Dockerfile and build context. Defaults to . (working directory).
        type: string
        default: .
      dockerfile:
        description: Name of the dockerfile to use to build container. Defaults to Dockerfile.
        type: string
        default: Dockerfile
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Check Environment Variables
          command: |
            if [[ -z "${DOCKER_LOGIN}" ]]; then
              echo "DOCKER_LOGIN is not set, will not be able to push image."
              exit 1
            fi

            if [[ -z "${DOCKER_PASSWORD}" ]]; then
              echo "DOCKER_PASSWORD is not set, will not be able to push image."
              exit 1
            fi
      - run:
          name: Docker Login
          command: docker login -u "${DOCKER_LOGIN}" -p "${DOCKER_PASSWORD}" quay.io
      - run:
          name: Build Docker Image
          command: |
            docker build \
              -t quay.io/<< parameters.image >>:${CIRCLE_SHA1} \
              -t quay.io/<< parameters.image >>:${CIRCLE_SHA1:0:7} \
              --label "edu.upenn.library.build-system=circleci" \
              --label "edu.upenn.library.circleci.build-number=${CIRCLE_BUILD_NUM}" \
              --label "edu.upenn.library.circleci.build-timestamp=$(date -uIs)" \
              --label "edu.upenn.library.circleci.build-url=${CIRCLE_BUILD_URL}" \
              --label "edu.upenn.library.circleci.git-branch=${CIRCLE_BRANCH}" \
              --label "edu.upenn.library.circleci.git-commit=${CIRCLE_SHA1}" \
              --label "edu.upenn.library.circleci.git-repo-url=${CIRCLE_REPOSITORY_URL}" \
              --label "edu.upenn.library.circleci.workflow-id=${CIRCLE_WORKFLOW_ID}" \
              -f << parameters.dockerfile >> \
              << parameters.path >>
      - run:
          name: Push Docker Image
          command: |
            if [[ $CIRCLE_NODE_INDEX == 0 ]]; then
              docker push --all-tags quay.io/<< parameters.image >>
            fi     

workflows:
  build_test_and_deploy:
    jobs:
      - check-for-secrets
      - publish_container:
          name: publish_metridoc
          context: quay.io
          image: upennlibraries/metridoc
          requires:
            - check-for-secrets
      - publish_container:
          name: publish_metridoc_python_jobs
          context: quay.io
          image: upennlibraries/metridoc-python-jobs
          dockerfile: ./ansible/roles/python_jobs_manager/files/src/Dockerfile
          path: ./ansible/roles/python_jobs_manager/files/src
          requires:
            - check-for-secrets
      - publish_container:
          name: publish_metridoc_ezpaarse
          context: quay.io
          image: upennlibraries/metridoc-ezpaarse
          dockerfile: ./ansible/roles/ezpaarse_manager/files/ezpaarse/Dockerfile
          path: ./ansible/roles/ezpaarse_manager/files/ezpaarse
          requires:
            - check-for-secrets
      - publish_container:
          name: publish_metridoc_ezpaarse_mongodb
          context: quay.io
          image: upennlibraries/metridoc-ezpaarse-mongodb
          dockerfile: ./ansible/roles/ezpaarse_manager/files/mongodb/Dockerfile
          path: ./ansible/roles/ezpaarse_manager/files/mongodb
          requires:
            - check-for-secrets
      - deploy-production:
          filters:
            branches:
              only: master
          requires:
            - publish_metridoc
            - publish_metridoc_python_jobs
            - publish_metridoc_ezpaarse
            - publish_metridoc_ezpaarse_mongodb
            # - test_jenkins_manager_role
            # - test_metridoc_manager_role
            # - test_postgres_primary_manager_role
            # - test_postgres_replica_manager_role
      - deploy-staging:
          filters:
            branches:
              only: staging
          requires:
            - publish_metridoc
            - publish_metridoc_python_jobs
            - publish_metridoc_ezpaarse
            - publish_metridoc_ezpaarse_mongodb
            # - test_jenkins_manager_role
            # - test_metridoc_manager_role
            # - test_postgres_primary_manager_role
            # - test_postgres_replica_manager_role
